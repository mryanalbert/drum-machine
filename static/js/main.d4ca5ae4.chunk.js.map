{"version":3,"sources":["img/off_btn.png","img/on_btn.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","data","id","letter","src","App","props","state","display","img","handleDisplay","bind","PowerOff","PowerOn","this","setState","className","map","d","power","on_btn","alt","onClick","off_btn","Component","Drumpad","handleKeyDown","e","keyCode","charCodeAt","audio","play","handleClick","document","addEventListener","ref","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,4OCIrCC,EAAO,CACT,CAAEC,GAAI,QAASC,OAAQ,IAAKC,IAAK,qDACjC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,yDAClC,CAAEF,GAAI,QAASC,OAAQ,IAAKC,IAAK,mDACjC,CAAEF,GAAI,UAAWC,OAAQ,IAAKC,IAAK,0DACnC,CAAEF,GAAI,SAAUC,OAAQ,IAAKC,IAAK,iDAClC,CAAEF,GAAI,UAAWC,OAAQ,IAAKC,IAAK,2DACnC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,iDACpC,CAAEF,GAAI,WAAYC,OAAQ,IAAKC,IAAK,yDACpC,CAAEF,GAAI,QAASC,OAAQ,IAAKC,IAAK,iEAyDtBC,E,YArDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,QAAS,YACTC,KAAK,GAGT,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAVA,E,2EAaLH,GACVM,KAAKC,SAAS,CAAEP,c,iCAIhBM,KAAKC,SAAS,CAAEP,QAAS,YAAaC,KAAK,M,gCAI3CK,KAAKC,SAAS,CAAEN,KAAK,M,+BAGf,IAAD,OACL,OACI,yBAAKO,UAAU,MAAMd,GAAG,gBACpB,yBAAKc,UAAU,aACX,yBAAKA,UAAU,sBACVf,EAAKgB,IAAI,SAAAC,GAAC,OACP,kBAAC,EAAD,CAAShB,GAAIgB,EAAEhB,GAAIC,OAAQe,EAAEf,OAAQC,IAAKc,EAAEd,IAAKM,cAAe,EAAKA,cAAeS,MAAO,EAAKZ,MAAME,SAG9G,yBAAKO,UAAU,eACX,6BAEQF,KAAKP,MAAME,IACX,yBAAKL,IAAKgB,IAAQC,IAAI,aAAaC,QAASR,KAAKF,WACjD,yBAAKR,IAAKmB,IAASF,IAAI,aAAaC,QAASR,KAAKD,WAG1D,6BACI,6BAAK,uCACL,yBAAKX,GAAG,WAAWY,KAAKP,MAAMC,iB,GA7CxCgB,aAyDZC,E,YACF,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KAWVoB,cAAgB,SAACC,GACVA,EAAEC,UAAY,EAAKtB,MAAMH,OAAO0B,eAC/B,EAAKC,MAAMC,OACX,EAAKzB,MAAMI,cAAc,EAAKJ,MAAMJ,MAZxC,EAAK8B,YAAc,EAAKA,YAAYrB,KAAjB,gBACnB,EAAKe,cAAgB,EAAKA,cAAcf,KAAnB,gBAJN,E,iFAQfsB,SAASC,iBAAiB,UAAWpB,KAAKY,iB,oCAYtCZ,KAAKR,MAAMa,QACXL,KAAKgB,MAAMC,OACXjB,KAAKR,MAAMI,cAAcI,KAAKR,MAAMJ,O,+BAOlC,IAAD,OACL,OACI,yBAAKc,UAAU,WAAWd,GAAIY,KAAKR,MAAMJ,GAAIoB,QAASR,KAAKkB,aACvD,4BAAKlB,KAAKR,MAAMH,QAChB,2BAAOa,UAAU,OAAOd,GAAIY,KAAKR,MAAMH,OAAQC,IAAKU,KAAKR,MAAMF,IAAK+B,IAAK,SAAAA,GAAG,OAAI,EAAKL,MAAQK,U,GAlCvFX,aC7DFY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAST,SAASU,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d4ca5ae4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/off_btn.4eb0eea1.png\";","module.exports = __webpack_public_path__ + \"static/media/on_btn.d9e72a2a.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport off_btn from './img/off_btn.png'\nimport on_btn from './img/on_btn.png'\nconst data = [\n    { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\n    { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\n    { id: 'bongo', letter: 'E', src: 'http://tipiwiki.free.fr/snd/Percussion(4e)2.wav' },\n    { id: 'tom tom', letter: 'A', src: 'http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav' },\n    { id: 'bass 3', letter: 'S', src: 'http://billor.chsh.chc.edu.tw/sound/bass4.wav' },\n    { id: 'shotgun', letter: 'D', src: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav' },\n    { id: 'high hat', letter: 'Z', src: 'http://www.denhaku.com/r_box/tr707/closed.wav' },\n    { id: 'drum hit', letter: 'X', src: 'http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3' },\n    { id: 'laser', letter: 'C', src: 'http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav'  }\n  ];\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            display: \"_________\",\n            img: false\n        };\n\n        this.handleDisplay = this.handleDisplay.bind(this);\n        this.PowerOff = this.PowerOff.bind(this);\n        this.PowerOn = this.PowerOn.bind(this);\n    }\n\n    handleDisplay(display)  {\n        this.setState({ display })\n    } \n\n    PowerOff() {\n        this.setState({ display: \"_________\", img: false });\n    }\n\n    PowerOn() {\n        this.setState({ img: true });\n    }\n\n    render() {\n        return (\n            <div className=\"App\" id=\"drum-machine\">\n                <div className=\"container\">\n                    <div className=\"drumpad-components\">\n                        {data.map(d => (\n                            <Drumpad id={d.id} letter={d.letter} src={d.src} handleDisplay={this.handleDisplay} power={this.state.img} />\n                        ))}\n                    </div>\n                    <div className=\"sound-label\">\n                        <div>\n                            { \n                                this.state.img ?\n                                <img src={on_btn} alt=\"off button\" onClick={this.PowerOff} /> :\n                                <img src={off_btn} alt=\"off button\" onClick={this.PowerOn} /> \n                            }\n                        </div>\n                        <div>\n                            <div><h1>Sound:</h1></div>\n                            <div id=\"display\">{this.state.display}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\nclass Drumpad extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n\n    handleKeyDown = (e) => {\n        if(e.keyCode === this.props.letter.charCodeAt()) {\n            this.audio.play();\n            this.props.handleDisplay(this.props.id);\n        }\n    }\n\n    handleClick() {\n        if (this.props.power) {\n            this.audio.play();\n            this.props.handleDisplay(this.props.id);\n        }\n        else {\n\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"drum-pad\" id={this.props.id} onClick={this.handleClick}>\n                <h3>{this.props.letter}</h3>\n                <audio className=\"clip\" id={this.props.letter} src={this.props.src} ref={ref => this.audio = ref}></audio>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}